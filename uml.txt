@startuml

package fr.upem.net.tcp.nonblocking {
    class ServerChatHack {
        +void launch()
    }
    
    class ChatChaton {
        +void launch()
    }
}

package fr.upem.net.tcp.reader {
    enum ProcessStatus {
        DONE,REFILL,ERROR
    }
    
    interface Reader<T> {
        +ProcessStatus process()
        +T get()
        +void reset()
    }
    
    class SelectOpcodeReader<Reader<Data>> {
        +{static}Reader<Data> create(ByteBuffer bb)
    }
    
    ProcessStatus -right-> Reader
    Reader -down--> ServerChatHack
    Reader -down--> ChatChaton
    SelectOpcodeReader .down.|> Reader
    
    note left of SelectOpcodeReader : Will select the right reader to apply.
    note right of Reader : Will implemente mutiple readers
}

package fr.upem.net.tcp.frame {
    interface Frame {
        +ByteBuffer buffer()
        {static}+Frame createFrameGlobal(DataGlobal data)
        {static}+Frame createFrameError(DataError data)
        {static}+Frame createFrameConnection(DataConnectionClient data)
        {static}+Frame createFrameConnectionMdp(DataConnectionServerMdp data)
        {static}+Frame createFrameConnectMdpServer(DataConnectionServerMdpReponse data)
        {static}+Frame createFramePrivateConnectionRequested(DataPrivateConnectionRequested data)
        {static}+Frame createFramePrivateConnectionReponse(DataPrivateConnectionReponse data)
        {static}+Frame createFramePrivateConnectionAccepted(DataPrivateConnectionAccepted data)
    }
    
    interface Data {
        {static}+DT createDataText(String text)
        {static}+DGS createDataGlobalServer(StandardOperation opcode, byte step, String pseudo, String message)
        {static}+DGC createDataGlobalClient(StandardOperation opcode, byte step, String message)
        {static}+DE createDataError(StandardOperation opcode, byte requestCode)
        {static}+DCC createDataConnectionClient(StandardOperation opcode, byte connexion, String login, Optional<String> password)
        {static}+DCSM createDataConnectionServerMdp(DataConnectionClient data)
        {static}+DCSMR createDataConnectionServerMdpReponse(byte opcode, long id)
        {static}+DPCReq createDataPrivateConnectionRequested(StandardOperation opcode, byte step, String login)
        {static}+DPCA createDataPrivateConnectionAccepted(StandardOperation opcode, byte step, String login, int port, String socketAdress, long token)
        {static}+DPCRep createDataPrivateConnectionReponse(StandardOperation opcode, byte step, String login, byte state)
        {static}+DPCC createDataPrivateConnectionConnect(StandardOperation opcode, byte step, String login, long token)
    }
    
    
    
    class FrameVisitor {
        +<T extends Data> FrameVisitor when(Class<? extends T> type, Function<? super T, ? extends Frame> fun)
        +Frame call(Data receiver)
    }
    
    enum StandardOperation {
        CONNEXION,
        GLOBAL_MESSAGE, 
        PRIVATE_CONNEXION, 
        PRIVATE_MESSAGE,
        PRIVATE_FILE, 
        DECONNEXION, 
        ACK, 
        ERROR
    }
    
    Data ..> SelectOpcodeReader
    Data .down.> FrameVisitor
    Frame .right.> FrameVisitor
    StandardOperation .right.> Data
    FrameVisitor -down--> ServerChatHack
    FrameVisitor -down--> ChatChaton
    
    note top of Data : Many individual datas.
}

@enduml